/* DO NOT EDIT THIS FILE - it is machine generated */
#include "jni.h"
/* Header for class Thread */

#ifndef _Included_Thread
#define _Included_Thread
#ifdef __cplusplus
extern "C" {
#endif
/* Inaccessible static: MAX_PRIORITY */
/* Inaccessible static: MIN_PRIORITY */
/* Inaccessible static: NORM_PRIORITY */
/*
 * Class:     Thread
 * Method:    CreateThread
 * Signature: ()Ljava/lang/Thread;
 */
JNIEXPORT jobject JNICALL Java_java_lang_Thread_CreateThread
  (JNIEnv *, jclass);

/*
 * Class:     Thread
 * Method:    checkAccess
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_checkAccess
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    countStackFrames
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_java_lang_Thread_countStackFrames
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    currentThread
 * Signature: ()Ljava/lang/Thread;
 */
JNIEXPORT jobject JNICALL Java_java_lang_Thread_currentThread
  (JNIEnv *, jclass);

/*
 * Class:     Thread
 * Method:    destroy
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_destroy
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    dumpStack
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_dumpStack
  (JNIEnv *, jclass);

/*
 * Class:     Thread
 * Method:    getName
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_java_lang_Thread_getName
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    getPriority
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_java_lang_Thread_getPriority
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    holdsLock
 * Signature: (Ljava/lang/Object;)Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_holdsLock
  (JNIEnv *, jclass, jobject);

/*
 * Class:     Thread
 * Method:    interrupt
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_interrupt
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    isAlive
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_isAlive
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    isDaemon
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_isDaemon
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    isInterrupted
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_java_lang_Thread_isInterrupted
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    join
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_join__
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    join
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_join__J
  (JNIEnv *, jobject, jlong);

/*
 * Class:     Thread
 * Method:    join
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_join__JI
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     Thread
 * Method:    resume
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_resume
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    setDaemon
 * Signature: (Z)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setDaemon
  (JNIEnv *, jobject, jboolean);

/*
 * Class:     Thread
 * Method:    setName
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setName
  (JNIEnv *, jobject, jstring);

/*
 * Class:     Thread
 * Method:    setPriority
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_setPriority
  (JNIEnv *, jobject, jint);

/*
 * Class:     Thread
 * Method:    sleep
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_sleep__J
  (JNIEnv *, jclass, jlong);

/*
 * Class:     Thread
 * Method:    sleep
 * Signature: (JI)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_sleep__JI
  (JNIEnv *, jclass, jlong, jint);

/*
 * Class:     Thread
 * Method:    start
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_start
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    stop_internal
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_stop_1internal__
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    stop_internal
 * Signature: (Ljava/lang/Throwable;)V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_stop_1internal__Ljava_lang_Throwable_2
  (JNIEnv *, jobject, jthrowable);

/*
 * Class:     Thread
 * Method:    suspend
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_suspend
  (JNIEnv *, jobject);

/*
 * Class:     Thread
 * Method:    yield
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_java_lang_Thread_yield
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
